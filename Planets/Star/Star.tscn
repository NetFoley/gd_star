[gd_scene load_steps=13 format=2]

[ext_resource path="res://Planets/Star/StarFlares.shader" type="Shader" id=3]

[sub_resource type="GDScript" id=17]
script/source = "extends \"res://Planets/Planet.gd\"

var res = preload(\"res://Planets/Star/Star.tres\")

func set_pixels(amount):
	$StarBackground.material.set_shader_param(\"pixels\", amount*relative_scale)
	$Star.material.set_shader_param(\"pixels\", amount)
	$StarFlares.material.set_shader_param(\"pixels\", amount*relative_scale)

	$Star.rect_size = Vector2(amount, amount)
	$StarFlares.rect_size = Vector2(amount, amount)*relative_scale
	$StarBackground.rect_size = Vector2(amount, amount)*relative_scale

	$StarFlares.rect_position = Vector2(-amount, -amount) * 0.5
	$StarBackground.rect_position = Vector2(-amount, -amount) * 50.5

func set_light(_pos):
	pass

func set_seed(sd):
	var converted_seed = sd%1000/100.0
	$StarBackground.material.set_shader_param(\"seed\", converted_seed)
	$Star.material.set_shader_param(\"seed\", converted_seed)
	$StarFlares.material.set_shader_param(\"seed\", converted_seed)

#	removed now with color setting functionality
#	_set_colors(sd)

var starcolor1 = Gradient.new()
var starcolor2 = Gradient.new()
var starflarecolor1 = Gradient.new()
var starflarecolor2 = Gradient.new()

func _ready():
	starcolor1.offsets = [0, 0.33, 0.66, 1.0]
	starcolor2.offsets = [0, 0.33, 0.66, 1.0]
	starflarecolor1.offsets = [0.0, 1.0]
	starflarecolor2.offsets = [0.0, 1.0]
	
	starcolor1.colors = [Color(\"f5ffe8\"), Color(\"ffd832\"), Color(\"ff823b\"), Color(\"7c191a\")]
	starcolor2.colors = [Color(\"f5ffe8\"), Color(\"77d6c1\"), Color(\"1c92a7\"), Color(\"033e5e\")]
	
	starflarecolor1.colors = [Color(\"ffd832\"), Color(\"f5ffe8\")]
	starflarecolor2.colors = [Color(\"77d6c1\"), Color(\"f5ffe8\")]
	
	$Star.material = res.duplicate(true)
	

func _set_colors(sd): # this is just a little extra function to show some different possible stars
	if (sd % 2 == 0):
		$Star.material.get_shader_param(\"colorramp\").gradient = starcolor1
		$StarFlares.material.get_shader_param(\"colorramp\").gradient = starflarecolor1
	else:
		$Star.material.get_shader_param(\"colorramp\").gradient = starcolor2
		$StarFlares.material.get_shader_param(\"colorramp\").gradient = starflarecolor2

func set_rotate(r):
	$StarBackground.material.set_shader_param(\"rotation\", r)
	$Star.material.set_shader_param(\"rotation\", r)
	$StarFlares.material.set_shader_param(\"rotation\", r)

func update_time(t):
	$StarBackground.material.set_shader_param(\"time\", t * get_multiplier($StarBackground.material) * 0.01)
	$Star.material.set_shader_param(\"time\", t * get_multiplier($Star.material) * 0.005)
	$StarFlares.material.set_shader_param(\"time\", t * get_multiplier($StarFlares.material) * 0.015)
	$StarFlaresContact.material.set_shader_param(\"time\", t * get_multiplier($StarFlaresContact.material) * 0.015)

func set_custom_time(t):
	$StarBackground.material.set_shader_param(\"time\", t * get_multiplier($StarBackground.material))
	$Star.material.set_shader_param(\"time\", t * (1.0 / $Star.material.get_shader_param(\"time_speed\")))
	$StarFlares.material.set_shader_param(\"time\", t * get_multiplier($StarFlares.material))

func set_dither(d):
	$Star.material.set_shader_param(\"should_dither\", d)
	$StarFlares.material.set_shader_param(\"should_dither\", d)

func get_dither():
	return $Star.material.get_shader_param(\"should_dither\")
	
func get_colors():
	return (PoolColorArray(_get_colors_from_vars($StarBackground.material, [\"color\"]))
	+ _get_colors_from_gradient($Star.material, \"colorramp\")
	+ _get_colors_from_gradient($StarFlares.material, \"colorramp\"))

func set_colors(colors):
	# poolcolorarray doesnt have slice function, convert to generic array first then back to poolcolorarray
	var cols1 = PoolColorArray(Array(colors).slice(1, 4, 1))
	var cols2 = PoolColorArray(Array(colors).slice(5, 6, 1))
	
	$StarBackground.material.set_shader_param(\"color\", colors[0])
	_set_colors_from_gradient($Star.material, \"colorramp\", cols1)
	_set_colors_from_gradient($StarFlares.material, \"colorramp\", cols2)

func randomize_colors():
	var seed_colors = _generate_new_colorscheme(4, rand_range(0.2, 0.4), 2.0)
	var cols = []
	for i in 4:
		var new_col = seed_colors[i].darkened((i/4.0) * 0.9)
		new_col = new_col.lightened((1.0 - (i/4.0)) * 0.8)

		cols.append(new_col)
	cols[0] = cols[0].lightened(0.8)

	set_colors([cols[0]] + cols + [cols[1], cols[0]])
"

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float pixels : hint_range(10,500);
uniform vec4 color : hint_color;
uniform float time_speed : hint_range(0.0, 1.0) = 0.05;
uniform float time = 0.0;
uniform float rotation : hint_range(0.0, 6.28) = 0.0;


uniform float seed: hint_range(1, 10);
uniform float circle_amount : hint_range(2.0, 30.0) = 5.0;
uniform float circle_size : hint_range(0.0, 1.0) = 1.0;

uniform float size = 50.0;
uniform int OCTAVES : hint_range(0, 20, 1);


float rand(vec2 co){
	co = mod(co, vec2(1.0,1.0)*round(size));
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 15.5453 * seed);
}


vec2 rotate(vec2 vec, float angle) {
	vec -=vec2(0.5);
	vec *= mat2(vec2(cos(angle),-sin(angle)), vec2(sin(angle),cos(angle)));
	vec += vec2(0.5);
	return vec;
}

float circle(vec2 uv) {
	float invert = 1.0 / circle_amount;
	
	if (mod(uv.y, invert*2.0) < invert) {
		uv.x += invert*0.5;
	}
	vec2 rand_co = floor(uv*circle_amount)/circle_amount;
	uv = mod(uv, invert)*circle_amount;
	
	float r = rand(rand_co);
	r = clamp(r, invert, 1.0 - invert);
	float circle = distance(uv, vec2(r));
	return smoothstep(circle, circle+0.5, invert * circle_size * rand(rand_co*1.5));
}


float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
		
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scl = 0.5;

	for(int i = 0; i < OCTAVES ; i++){
		value += noise(coord) * scl;
		coord *= 2.0;
		scl *= 0.5;
	}
	return value;
}

vec2 spherify(vec2 uv) {
	vec2 centered= uv *2.0-1.0;
	float z = sqrt(1.0 - dot(centered.xy, centered.xy));
	vec2 sphere = centered/(z + 1.0);
	return sphere * 0.5+0.5;
}

void fragment() {
	vec2 pixelized = floor(UV*pixels)/pixels;

	vec2 uv = rotate(pixelized, rotation);

	// angle from centered uv's
	float angle = atan(uv.x - 0.5, uv.y - 0.5);
	float d = distance(pixelized, vec2(0.5));
	
	
	float c = 0.0;
	for(int i = 0; i < 15; i++) {
		float r = rand(vec2(float(i)));
		vec2 circleUV = vec2(d, angle);
		c += circle(circleUV*size -time * time_speed - (1.0/d) * 0.1 + r);
	}
	
	c *= 0.37 - d;
	c = step(0.07, c - d);
	
	COLOR = vec4(color.rgb, c * color.a);
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 15 )
shader_param/pixels = 200.0
shader_param/color = Color( 1, 1, 0.894118, 1 )
shader_param/time_speed = 0.05
shader_param/time = 0.0
shader_param/rotation = 0.0
shader_param/seed = 3.078
shader_param/circle_amount = 2.0
shader_param/circle_size = 1.0
shader_param/size = 4.93
shader_param/OCTAVES = 4

[sub_resource type="Shader" id=18]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float pixels : hint_range(10,100);
uniform float time_speed : hint_range(0.0, 1.0) = 0.05;
uniform float time;
uniform float rotation : hint_range(0.0, 6.28) = 0.0;
uniform sampler2D colorramp;
uniform bool should_dither = true;

uniform float seed: hint_range(1, 10);
uniform float size = 50.0;
uniform int OCTAVES : hint_range(0, 20, 1);
uniform float TILES : hint_range(0, 20, 1);


float rand(vec2 co) {
	co = mod(co, vec2(1.0,1.0)*round(size));
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 15.5453 * seed);
}

vec2 rotate(vec2 vec, float angle) {
	vec -=vec2(0.5);
	vec *= mat2(vec2(cos(angle),-sin(angle)), vec2(sin(angle),cos(angle)));
	vec += vec2(0.5);
	return vec;
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
		
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

vec2 Hash2(vec2 p) {
	float r = 523.0*sin(dot(p, vec2(53.3158, 43.6143)));
	return vec2(fract(15.32354 * r), fract(17.25865 * r));
	
}

// Tileable cell noise by Dave_Hoskins from shadertoy: https://www.shadertoy.com/view/4djGRh
float Cells(in vec2 p, in float numCells) {
	p *= numCells;
	float d = 1.0e10;
	for (int xo = -1; xo <= 1; xo++)
	{
		for (int yo = -1; yo <= 1; yo++)
		{
			vec2 tp = floor(p) + vec2(float(xo), float(yo));
			tp = p - tp - Hash2(mod(tp, numCells / TILES));
			d = min(d, dot(tp, tp));
		}
	}
	return sqrt(d);
}

bool dither(vec2 uv1, vec2 uv2) {
	return mod(uv1.x+uv2.y,2.0/pixels) <= 1.0 / pixels;
}

vec2 spherify(vec2 uv) {
	vec2 centered= uv *2.0-1.0;
	float z = sqrt(1.0 - dot(centered.xy, centered.xy));
	vec2 sphere = centered/(z + 1.0);
	return sphere * 0.5+0.5;
}

void fragment() {
	// pixelize uv
	vec2 pixelized = floor(UV*pixels)/pixels;
	
	// cut out a circle
	// stepping over 0.5 instead of 0.49999 makes some pixels a little buggy
	float a = step(distance(pixelized, vec2(0.5)), .49999);
	
	// use dither val later to mix between colors
	bool dith = dither(UV, pixelized);
	
	pixelized = rotate(pixelized, rotation);
	
	// spherify has to go after dither
	pixelized = spherify(pixelized);
	
	// use two different sized cells for some variation
	float n = Cells(pixelized - vec2(time * time_speed * 2.0, 0), 10);
	n *= Cells(pixelized - vec2(time * time_speed * 1.0, 0), 20);

	
	// adjust cell value to get better looking stuff
	n*= 2.;
	n = clamp(n, 0.0, 1.0);
	if (dith || !should_dither) { // here we dither
		n *= 1.3;
	}
	
	// constrain values 4 possibilities and then choose color based on those
	float interpolate = floor(n * 3.0) / 3.0;
	vec4 col = texture(colorramp, vec2(interpolate, 0.0));
	
	COLOR = vec4(col.rgb, a * col.a);
}"

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0, 0.33, 0.66, 1 )
colors = PoolColorArray( 0.960784, 1, 0.909804, 1, 0.466667, 0.839216, 0.756863, 1, 0.109804, 0.572549, 0.654902, 1, 0.0117647, 0.243137, 0.368627, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/pixels = 100.0
shader_param/time_speed = 0.05
shader_param/time = 51.877
shader_param/rotation = 0.0
shader_param/should_dither = true
shader_param/seed = 4.837
shader_param/size = 4.463
shader_param/OCTAVES = 4
shader_param/TILES = 1.0
shader_param/colorramp = SubResource( 3 )

[sub_resource type="Gradient" id=5]
colors = PoolColorArray( 0.0942383, 0.753906, 0.608085, 1, 1, 1, 0.894118, 1 )

[sub_resource type="GradientTexture" id=6]
gradient = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 3 )
shader_param/pixels = 200.0
shader_param/time_speed = 0.05
shader_param/time = 0.0
shader_param/rotation = 0.0
shader_param/direction = 0.0
shader_param/should_direc = false
shader_param/should_dither = true
shader_param/storm_width = 0.3
shader_param/storm_dither_width = 0.0
shader_param/scale = 1.0
shader_param/seed = 3.313
shader_param/circle_amount = 2.0
shader_param/circle_scale = 1.0
shader_param/size = 5.0
shader_param/OCTAVES = 4
shader_param/colorramp = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=8]
shader = ExtResource( 3 )
shader_param/pixels = 200.0
shader_param/time_speed = 0.01
shader_param/time = 50.0
shader_param/rotation = 0.0
shader_param/direction = 0.0
shader_param/should_direc = false
shader_param/should_dither = true
shader_param/storm_width = 0.3
shader_param/storm_dither_width = 0.0
shader_param/scale = 1.0
shader_param/seed = 1.0
shader_param/circle_amount = 2.0
shader_param/circle_scale = 1.0
shader_param/size = 5.0
shader_param/OCTAVES = 4
shader_param/colorramp = SubResource( 6 )

[node name="Star" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -412.0
margin_bottom = -200.0
rect_pivot_offset = Vector2( 100, 100 )
mouse_filter = 1
mouse_default_cursor_shape = 2
size_flags_horizontal = 0
size_flags_vertical = 0
script = SubResource( 17 )
relative_scale = 2.0
gui_zoom = 2.0

[node name="StarBackground" type="ColorRect" parent="."]
material = SubResource( 13 )
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Star" type="ColorRect" parent="."]
material = SubResource( 19 )
margin_right = 100.0
margin_bottom = 100.0
mouse_filter = 1

[node name="StarFlares" type="ColorRect" parent="."]
material = SubResource( 7 )
margin_left = -50.0
margin_top = -50.0
margin_right = 150.0
margin_bottom = 150.0
mouse_filter = 2

[node name="StarFlaresContact" type="ColorRect" parent="."]
visible = false
material = SubResource( 8 )
margin_left = -50.0
margin_top = -50.0
margin_right = 150.0
margin_bottom = 150.0
mouse_filter = 2
